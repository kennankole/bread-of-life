# syntax=docker/dockerfile:1


#Base image
FROM python:3.8-slim-buster AS base

# Setting a working directory
WORKDIR /application

# Prevents Python from writing pyc files to disc 
ENV PYTHONDONTWRITEBYTCODE 1
# Prevents Python from buffering stdout and stderr 
ENV PYTHONFAULTHANDLER 1


# Installing Dependencies
RUN apt-get update && apt-get install -y --no-install-recommends gcc

# lint 
RUN pip install --upgrade pip && pip install pipenv
RUN pipenv install flake8==3.9.1
COPY . /application/
RUN pipenv run flake8 --ignore=E501,F401,F811 .

# Python dependencies 
COPY ./Pipfile* /application/
RUN PIPENV_VENV_IN_PROJECT=1 pipenv install --system --deploy
RUN apt-get update && apt-get install -y netcat --no-install-recommends



FROM python:3.8-slim-buster
RUN mkdir -p /home/application

RUN addgroup --system app && adduser --system --group app

ENV HOME=/home/application
ENV APP_HOME=/home/application/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends netcat\
    && rm -rf  /var/lib/apt/lists/* 
    
COPY --from=base /application/Pipfile* ./
RUN pip install --upgrade pip && pip install pipenv
RUN PIPENV_VENV_IN_PROJECT=1 pipenv install --system --deploy


# copy entrypoint-prod.sh
COPY ./entrypoint.sh $APP_HOME

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT [ "/home/application/web/entrypoint.sh" ]
